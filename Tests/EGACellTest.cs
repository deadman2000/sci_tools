using NUnit.Framework;
using SCI_Lib.Resources.View;
using SCI_Lib.Utils;
using System.IO;

namespace Tests
{
    public class EGACellTest
    {
        private void TryDecode(Cell cell)
        {
            ByteBuilder bb = new();
            cell.WriteEVGA(bb, false);
            var bytes = bb.GetArray();

            Cell cell2 = new(null, Palette.EGA);
            cell2.ReadEVGA(new MemoryStream(bytes), false, 0);

            Assert.AreEqual(cell2.Pixels, cell.Pixels);
        }

        [Test]
        public void PixelTest()
        {
            Cell cell = new(null, Palette.EGA)
            {
                Width = 1,
                Height = 1,
                Pixels = new byte[1]
            };

            TryDecode(cell);
        }

        [Test]
        public void EmptyLineTest()
        {
            Cell cell = new(null, Palette.EGA)
            {
                Width = 100,
                Height = 1,
                Pixels = new byte[100]
            };

            TryDecode(cell);
        }

        [Test]
        public void EmptySquareTest()
        {
            Cell cell = new(null, Palette.EGA)
            {
                Width = 10,
                Height = 10,
                Pixels = new byte[100]
            };

            TryDecode(cell);
        }

        [Test]
        public void DiagonalTest()
        {
            Cell cell = new(null, Palette.EGA)
            {
                Width = 10,
                Height = 10,
                Pixels = new byte[100]
            };
            for (int i = 0; i < 10; i++)
                cell.Pixels[i + i * 10] = 1;

            TryDecode(cell);
        }

        [Test]
        public void Diagonal2Test()
        {
            Cell cell = new(null, Palette.EGA)
            {
                Width = 10,
                Height = 10,
                Pixels = new byte[100]
            };
            for (int i = 0; i < 10; i++)
                cell.Pixels[9 - i + i * 10] = 1;

            TryDecode(cell);
        }

        [Test]
        public void ImageTest()
        {
            Cell cell = new(null, Palette.EGA)
            {
                Width = 70,
                Height = 10,
                Pixels = new byte[700]
                {
                    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 4, 15, 4, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 4, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 4, 15, 15, 15, 15, 15, 15, 15, 15, 4, 4, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 4, 15, 15, 15, 4, 15, 4, 15, 4, 15, 4, 15, 15, 4, 15, 4, 15, 15, 15, 4, 15, 4, 15, 4, 15, 4, 15, 4, 15, 4, 15, 15, 15, 15, 4, 15, 4, 15, 15, 4, 15, 4, 15, 15, 15, 4, 15, 4, 15, 15, 15, 15, 15, 15, 15, 15, 15, 4, 15, 4, 15, 15, 15, 4, 15, 4, 15, 15, 4, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 4, 15, 15, 15, 15, 15, 4, 4, 15, 15, 15, 15, 4, 15, 15, 4, 15, 4, 4, 15, 15, 4, 15, 15, 15, 15, 4, 15, 15, 4, 15, 15, 4, 15, 15, 15, 15, 4, 15, 4, 15, 4, 15, 4, 15, 15, 15, 15, 4, 15, 15, 15, 15, 15, 15, 15, 4, 4, 15, 15, 4, 15, 15, 15, 4, 15, 4, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 4, 15, 4, 15, 15, 15, 15, 4, 15, 4, 15, 15, 15, 15, 4, 15, 4, 15, 15, 15, 4, 15, 4, 15, 4, 15, 15, 15, 15, 4, 15, 15, 4, 15, 4, 15, 4, 15, 15, 15, 4, 15, 4, 15, 15, 15, 4, 15, 4, 15, 4, 15, 15, 15, 15, 15, 15, 4, 15, 4, 15, 4, 15, 15, 15, 15, 15, 4, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 4, 15, 15, 15, 15
                }
            };
            
            TryDecode(cell);
        }
    }
}
